{"version":3,"sources":["ui.js","constants.js","game.js","index.js"],"names":["modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","ICONS","FISH","POOP","WEATHER","TICK_RATE","SCENES","RAIN_CHANCE","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","STATES","HUNGRY","FEEDING","IDLING","HATCHING","SLEEP","INIT","CELEBRATING","DEAD","POOPING","RAIN","NIGHT","DAY","EATING","EGG","Game","currentState","wakeTime","sleepTime","hungryTime","dieTime","timeToStartCelebrating","timeToEndCelebrating","poopTime","tick","wake","sleep","getHungry","die","startCelebrating","endCelebrating","poop","scene","determineFoxState","startGame","changeWeather","length","cleanUpPoop","feed","clearTimes","handleUserAction","icon","includes","main","Main","game","nextTimeToTick","Date","now","selectedIcon","nextAnimationFrame","requestAnimationFrame","toggleHighlighted","Object","values","initButtons","addEventListener","buttonClick","event","target","contains","keys"],"mappings":"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","file":"src.679c1582.js","sourceRoot":"../src","sourcesContent":["export function modFox(state) {\n    document.querySelector(\".fox\").className = `fox fox-${state}`;\n}\n\nexport function modScene(state) {\n    document.querySelector(\".game\").className = `game ${state}`;\n}\n\nexport function togglePoopBag(show) {\n    document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n}\n","export const ICONS = { FISH: \"fish\", POOP: \"poop\", WEATHER: \"weather\" };\nexport const TICK_RATE = 3000;\nexport const SCENES = [\"day\", \"rain\"];\nexport const RAIN_CHANCE = 0.2;\nexport const DAY_LENGTH = 20;\nexport const NIGHT_LENGTH = 3;\n\nexport function getNextHungerTime(clock) {\n    return Math.floor(Math.random() * 3) + 5 + clock;\n}\n\nexport function getNextDieTime(clock) {\n    return Math.floor(Math.random() * 2) + 3 + clock;\n}\n\nexport function getNextPoopTime(clock) {\n    return Math.floor(Math.random() * 3) + 4 + clock;\n}\n\nexport const STATES = {\n    HUNGRY: \"hungry\",\n    FEEDING: \"feeding\",\n    IDLING: \"idling\",\n    HATCHING: \"hatching\",\n    SLEEP: \"sleep\",\n    INIT: \"init\",\n    CELEBRATING: \"celebrating\",\n    DEAD: \"dead\",\n    POOPING: \"pooping\",\n    RAIN: \"rain\",\n    NIGHT: \"night\",\n    DAY: \"day\",\n    EATING: \"eating\",\n    EGG: \"egg\"\n};\n","import { modFox, modScene, togglePoopBag } from \"./ui\";\nimport {\n    RAIN_CHANCE,\n    SCENES,\n    NIGHT_LENGTH,\n    DAY_LENGTH,\n    getNextHungerTime,\n    getNextDieTime,\n    STATES,\n    getNextPoopTime,\n    ICONS,\n} from \"./constants\";\n\nexport function Game() {\n    this.currentState = STATES.INIT;\n    this.clock = 1;\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n    this.poopTime = -1;\n\n    this.tick = () => {\n        this.clock++;\n        if (this.clock === this.wakeTime) {\n            this.wake();\n        } else if (this.clock === this.sleepTime) {\n            this.sleep();\n        } else if (this.clock === this.hungryTime) {\n            this.getHungry();\n        } else if (this.clock === this.dieTime) {\n            this.die();\n        } else if (this.clock === this.timeToStartCelebrating) {\n            this.startCelebrating();\n        } else if (this.clock === this.timeToEndCelebrating) {\n            this.endCelebrating();\n        } else if (this.clock === this.poopTime) {\n            this.poop();\n        }\n    };\n\n    this.wake = () => {\n        (this.currentState = STATES.IDLING), (this.wakeTime = -1);\n        this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n        modScene(SCENES[this.scene]);\n        this.determineFoxState();\n        this.hungryTime = getNextHungerTime(this.clock);\n        this.sleepTime = this.clock + DAY_LENGTH;\n    };\n\n    this.poop = () => {\n        this.currentState = STATES.POOPING;\n        this.poopTime = -1;\n        this.dieTime = getNextDieTime(this.clock);\n        modFox(STATES.POOPING);\n    };\n\n    this.startCelebrating = () => {\n        this.currentState = STATES.CELEBRATING;\n        modFox(STATES.CELEBRATING);\n        this.timeToStartCelebrating = -1;\n        this.timeToEndCelebrating = this.clock + 2;\n    };\n\n    this.endCelebrating = () => {\n        this.timeToEndCelebrating = -1;\n        this.currentState = STATES.IDLING;\n        this.determineFoxState();\n        togglePoopBag(false);\n    };\n\n    this.determineFoxState = () => {\n        if (this.currentState === STATES.IDLING) {\n            if (SCENES[this.scene] === STATES.RAIN) {\n                modFox(STATES.RAIN);\n            } else {\n                modFox(STATES.IDLING);\n            }\n        }\n    };\n\n    this.startGame = () => {\n        this.currentState = STATES.HATCHING;\n        this.wakeTime = this.clock + 2;\n        modFox(STATES.EGG);\n        modScene(STATES.DAY);\n    };\n\n    this.changeWeather = () => {\n        this.scene = (1 + this.scene) % SCENES.length;\n        modScene(SCENES[this.scene]);\n        this.determineFoxState();\n    };\n\n    this.cleanUpPoop = () => {\n        if (this.currentState === STATES.POOPING) {\n            this.dieTime = -1;\n            togglePoopBag(true);\n            this.startCelebrating();\n            this.hungryTime = getNextHungerTime(this.clock);\n        }\n    };\n\n    this.feed = () => {\n        if (this.currentState === STATES.HUNGRY) {\n            this.currentState = STATES.FEEDING;\n            this.dieTime = -1;\n            this.poopTime = getNextPoopTime(this.clock);\n            modFox(STATES.EATING);\n            this.timeToStartCelebrating = this.clock + 2;\n        }\n    };\n\n    this.getHungry = () => {\n        this.currentState = STATES.HUNGRY;\n        this.dieTime = getNextDieTime(this.clock);\n        this.hungryTime = -1;\n        modFox(STATES.HUNGRY);\n    };\n\n    this.die = () => {\n        this.currentState = STATES.DEAD;\n        modScene(STATES.DEAD);\n        modFox(STATES.DEAD);\n        this.clearTimes();\n    };\n\n    this.handleUserAction = (icon) => {\n        const blockingStates = [\n            STATES.SLEEP,\n            STATES.FEEDING,\n            STATES.CELEBRATING,\n            STATES.HATCHING,\n        ];\n        if (blockingStates.includes(this.currentState)) {\n            return;\n        }\n        if (this.currentState === STATES.INIT) {\n            this.startGame();\n            return;\n        }\n        if (this.currentState === STATES.DEAD) {\n            this.startGame();\n            return;\n        }\n        if (icon === ICONS.WEATHER) {\n            this.changeWeather();\n            return;\n        }\n        if (icon === ICONS.POOP) {\n            this.cleanUpPoop();\n            return;\n        }\n        if (icon === ICONS.FISH) {\n            this.feed();\n            return;\n        }\n    };\n\n    this.sleep = () => {\n        this.currentState = STATES.SLEEP;\n        modFox(STATES.SLEEP);\n        modScene(STATES.NIGHT);\n        this.clearTimes();\n        this.wakeTime = this.clock + NIGHT_LENGTH;\n    };\n\n    this.clearTimes = () => {\n        this.wakeTime = -1;\n        this.sleepTime = -1;\n        this.hungryTime = -1;\n        this.dieTime = -1;\n        this.poopTime = -1;\n        this.timeToStartCelebrating = -1;\n        this.timeToEndCelebrating = -1;\n    };\n}\n","import { Game } from \"./game\";\nimport { TICK_RATE, ICONS } from \"./constants\";\n\nconst main = new Main();\nmain.initButtons();\nrequestAnimationFrame(main.nextAnimationFrame);\n\nfunction Main() {\n    this.game = new Game();\n    this.nextTimeToTick = Date.now();\n    this.selectedIcon = 0;\n\n    this.nextAnimationFrame = async () => {\n        const now = Date.now();\n        if (this.nextTimeToTick <= now) {\n            this.game.tick();\n            this.nextTimeToTick = now + TICK_RATE;\n        }\n        requestAnimationFrame(this.nextAnimationFrame);\n    };\n\n    this.toggleHighlighted = (icon, show) => {\n        const className = `.${Object.values(ICONS)[icon]}-icon`;\n        const iconEl = document.querySelector(className);\n        iconEl.classList.toggle(\"highlighted\", show);\n    };\n\n    this.initButtons = () => {\n        document\n            .querySelector(\".buttons\")\n            .addEventListener(\"click\", this.buttonClick);\n    };\n\n    this.buttonClick = (event) => {\n        if (event.target.classList.contains(\"left-btn\")) {\n            this.toggleHighlighted(this.selectedIcon, false);\n            this.selectedIcon =\n                (2 + this.selectedIcon) % Object.keys(ICONS).length;\n            this.toggleHighlighted(this.selectedIcon, true);\n        } else if (event.target.classList.contains(\"right-btn\")) {\n            this.toggleHighlighted(this.selectedIcon, false);\n            this.selectedIcon =\n                (1 + this.selectedIcon) % Object.keys(ICONS).length;\n            this.toggleHighlighted(this.selectedIcon, true);\n        } else {\n            this.game.handleUserAction(Object.values(ICONS)[this.selectedIcon]);\n        }\n    };\n}\n"]}